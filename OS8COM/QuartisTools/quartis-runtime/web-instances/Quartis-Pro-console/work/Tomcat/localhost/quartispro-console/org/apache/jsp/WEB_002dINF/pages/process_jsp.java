/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.5
 * Generated at: 2019-03-20 13:51:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Properties;
import com.osys.quartispro.console.Dispatcher;
import com.osys.quartispro.common.Application;

public final class process_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.osys.quartispro.console.Dispatcher");
    _jspx_imports_classes.add("com.osys.quartispro.common.Application");
    _jspx_imports_classes.add("java.util.Properties");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
 
    String version = "1.0.4";

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("    <title>Console Web</title>\n");
      out.write("    <meta charset=\"UTF-8\" />\n");
      out.write("    <meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n");
      out.write("\n");
      out.write("\n");
      out.write("    ");

        String dispatcherUrl = Dispatcher.getInstance().getUrl();
        String hostname = (String) session.getAttribute("hostname");
        Integer port = (Integer) session.getAttribute("port");
        String token = (String) session.getAttribute("token");
        String user = (String) session.getAttribute("user");
        Boolean mobile = (Boolean) session.getAttribute("mobile");
        String websocket = (String) session.getAttribute("websocket");
        Integer animationSpeed = (Integer) session.getAttribute("animationSpeed");
        if (hostname == null || port == null || token == null || user == null || websocket == null) {
    
      out.write("\n");
      out.write("\n");
      out.write("    ");

        }
        if (mobile == null) {
            mobile = Boolean.FALSE;
        }
    
      out.write("\n");
      out.write("    \n");
      out.write("    ");
 
        String lang = (String) request.getAttribute("lang");
        Properties trad = (Properties) request.getAttribute("trad");
    
      out.write("\n");
      out.write("    \n");
      out.write("    <!-- Progressive web app support -->\n");
      out.write("    <link rel=\"manifest\" href=\"manifest.json\">\n");
      out.write("\n");
      out.write("\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/animation.css?version=");
      out.print( version );
      out.write("\" />\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/lib/normalize.min.css?version=");
      out.print( version );
      out.write("\" />\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/mainframe.css?version=");
      out.print( version );
      out.write("\" />\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/swappages.css?version=");
      out.print( version );
      out.write("\" />\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/quartis-manager.css?version=");
      out.print( version );
      out.write("\" />\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/offline/offline.css?version=");
      out.print( version );
      out.write("\" charset=\"utf-8\" />\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/offline/offline-language-");
      out.print( lang );
      out.write(".css?version=");
      out.print( version );
      out.write("\" charset=\"utf-8\" />\n");
      out.write("\n");
      out.write("    ");

        Application app = Application.getInstance();
        for (String path : app.getCssRelativePaths()) {
            out.println("<link rel=\"stylesheet\" type=\"text/css\" href=\"load?path=" + path + "?version=" + version + "\" />");
        }
    
      out.write("\n");
      out.write("    <script src=\"js/lib/jquery-3.3.1.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/bluebird.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/jquery.touchSwipe.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/react.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/react-dom.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/babel.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\" charset=\"utf-8\"></script>\n");
      out.write("    <script src=\"js/lib/flux.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/microevent.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/moment-with-locales.min.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/lib/offline.min.js?version=");
      out.print( version );
      out.write("\" charset=\"utf-8\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/mainframe-1.0.0.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/swappages-1.0.0.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/quartis-device.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/quartis-i18n-1.0.0.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/quartis-app-1.0.0.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/quartis-query-1.0.0.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/quartis-manager-1.0.1.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"js/quartis-tools-1.0.1.js?version=");
      out.print( version );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        //<!-- Annulation clic droit CJ 06/04-->\n");
      out.write("        document.oncontextmenu = new Function(\"return false\"); \n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");

        for (String path : app.getJsRelativePaths()) {
            out.println("<script type=\"text/javascript\" src=\"load?path=" + path + "?version=" + version + "\"></script>");
        }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");

        for (String path : app.getComponentsRelativePaths()) {
            out.println("<script type=\"text/javascript\" src=\"load?path=" + path + "?version=" + version + "\"></script>");
        }
    
      out.write("\n");
      out.write("\n");
      out.write("    <style>\n");
      out.write("        \n");
      out.write("        .androidMobileClickAnimation {\n");
      out.write("            opacity: 0.4 !important;\n");
      out.write("            border: 1px solid rgb(128, 255, 128) !important;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .moveTopToCenter {\n");
      out.write("            -webkit-animation: moveTopToCenter ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("            animation: moveTopToCenter ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .moveToTop {\n");
      out.write("            -webkit-animation: moveToTop ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("            animation: moveToTop ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes moveTopToCenter {\n");
      out.write("            from { -webkit-transform: translateY(-100%);  }\n");
      out.write("            to { -webkit-transform: translateY(0%); }\n");
      out.write("        }\n");
      out.write("        @keyframes moveTopToCenter {\n");
      out.write("            from { -webkit-transform: translateY(-100%); transform: translateY(-100%); }\n");
      out.write("            to { -webkit-transform: translateY(0%); transform: translateY(0%); }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes moveToTop {\n");
      out.write("            from { -webkit-transform: translateY(0%);  }\n");
      out.write("            to { -webkit-transform: translateY(-100%); }\n");
      out.write("        }\n");
      out.write("        @keyframes moveToTop {\n");
      out.write("            from { -webkit-transform: translateY(0%); transform: translateY(0%); }\n");
      out.write("            to { -webkit-transform: translateY(-100%); transform: translateY(-100%); }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .moveBotToCenter {\n");
      out.write("            -webkit-animation: moveBotToCenter ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("            animation: moveBotToCenter ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .moveToBot {\n");
      out.write("            -webkit-animation: moveToBot ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("            animation: moveToBot ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes moveBotToCenter {\n");
      out.write("            from { -webkit-transform: translateY(100%);  }\n");
      out.write("            to { -webkit-transform: translateY(0%); }\n");
      out.write("        }\n");
      out.write("        @keyframes moveBotToCenter {\n");
      out.write("            from { -webkit-transform: translateY(100%); transform: translateY(100%); }\n");
      out.write("            to { -webkit-transform: translateY(0%); transform: translateY(0%); }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes moveToBot {\n");
      out.write("            from { -webkit-transform: translateY(0%);  }\n");
      out.write("            to { -webkit-transform: translateY(100%); }\n");
      out.write("        }\n");
      out.write("        @keyframes moveToBot {\n");
      out.write("            from { -webkit-transform: translateY(0%); transform: translateY(0%); }\n");
      out.write("            to { -webkit-transform: translateY(100%); transform: translateY(100%); }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .moveEastToCenter {\n");
      out.write("            -webkit-animation: moveEastToCenter ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("            animation: moveEastToCenter ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .MoveToEast {\n");
      out.write("            -webkit-animation: MoveToEast ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("            animation: MoveToEast ");
      out.print(animationSpeed);
      out.write("ms ease both;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes moveEastToCenter {\n");
      out.write("            from { -webkit-transform: translateX(100%);  }\n");
      out.write("            to { -webkit-transform: translateX(0%); }\n");
      out.write("        }\n");
      out.write("        @keyframes moveEastToCenter {\n");
      out.write("            from { -webkit-transform: translateX(100%); transform: translateX(100%); }\n");
      out.write("            to { -webkit-transform: translateX(0%); transform: translateX(0%); }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes MoveToEast {\n");
      out.write("            from { -webkit-transform: translateX(0%);  }\n");
      out.write("            to { -webkit-transform: translateX(100%); }\n");
      out.write("        }\n");
      out.write("        @keyframes MoveToEast {\n");
      out.write("            from { -webkit-transform: translateX(0%); transform: translateX(0%); }\n");
      out.write("            to { -webkit-transform: translateX(100%); transform: translateX(100%); }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("    <body>            \n");
      out.write("        <div id=\"noclick\" style=\"width:100%;height:100%;z-index:10000;position:absolute;display:none;\">\n");
      out.write("        </div>\n");
      out.write("        <div id=\"portrait\">\n");
      out.write("            <div id=\"mainframe\">\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div id=\"logs\" class=\"logs\" style=\"display: none;\">\n");
      out.write("                <a href=\"#\" onclick=\"clearLogs()\">Clear</a> / <a href=\"#\" onclick=\"hideLogs()\">Close</a>\n");
      out.write("                <br/>\n");
      out.write("                <div id=\"messages\"></div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div id=\"loading\" class=\"center-div\" style=\"width: 300px; height: 200px\">\n");
      out.write("                <img src=\"images/loading_xs.gif\">\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div id=\"error-modal\" style=\"overflow: hidden; position: absolute; top: 0px; left: 0px; background-color: #2E2E2E; opacity: 0.8; z-index: 9991;\">\n");
      out.write("            </div>\n");
      out.write("            <div id=\"runtime-error\" class=\"center-div\" style=\"width: 300px; height: 200px; border: 1px solid white; color: white; background-color: #292C33; opacity: 1.0; z-index: 9992;\">\n");
      out.write("                <table cellpadding=\"0\" cellspacing=\"10\" style=\"width: 100%; text-align:center; margin-top: 30px;\">\n");
      out.write("                    <tbody>\n");
      out.write("                        <tr class=\"fontN heightS\">\n");
      out.write("                            <td><h3>");
      out.print( trad.getProperty("runtime.problem"));
      out.write("</h3></td>\n");
      out.write("                        </tr>\n");
      out.write("                        <tr class=\"fontN heightS\">\n");
      out.write("                            <td><span style=\"font-weight:bold; height: 40px\">");
      out.print( trad.getProperty("network.advice"));
      out.write("</span></td>\n");
      out.write("                        </tr>\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("            <div id=\"network-error\" class=\"center-div\" style=\"width: 300px; height: 200px; border: 1px solid white; color: white; background-color: #292C33; opacity: 1.0; z-index: 9992;\">\n");
      out.write("                <table cellpadding=\"0\" cellspacing=\"10\" style=\"width: 100%; text-align:center; margin-top: 30px;\">\n");
      out.write("                    <tbody>\n");
      out.write("                        <tr class=\"fontN heightS\">\n");
      out.write("                            <td><h3>");
      out.print( trad.getProperty("network.problem"));
      out.write("</h3></td>\n");
      out.write("                        </tr>\n");
      out.write("                        <tr class=\"fontN heightS\">\n");
      out.write("                            <td><span style=\"font-weight:bold; height: 40px\">");
      out.print( trad.getProperty("network.advice"));
      out.write("</span></td>\n");
      out.write("                        </tr>\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            // Previous page alert\n");
      out.write("            if (window.history && history.pushState) {\n");
      out.write("                addEventListener('load', function() {\n");
      out.write("                    history.pushState(null, null, null); \n");
      out.write("                    addEventListener('popstate', function() {\n");
      out.write("                        var stayOnPage = confirm(\"");
      out.print( trad.getProperty("event.back"));
      out.write("\");\n");
      out.write("                        if (!stayOnPage) {\n");
      out.write("                            history.pushState(null, null, null);\n");
      out.write("                        } else {\n");
      out.write("                            history.back();\n");
      out.write("                        }\n");
      out.write("                    });    \n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            var mainframe;\n");
      out.write("            var swappages;   \n");
      out.write("\n");
      out.write("            $(\"#error-modal\").css(\"width\", $(window).width());\n");
      out.write("            $(\"#error-modal\").css(\"height\", $(window).height());\n");
      out.write("\n");
      out.write("            $(\"#error-modal\").hide();\n");
      out.write("            $(\"#runtime-error\").hide();\n");
      out.write("            $(\"#network-error\").hide();\n");
      out.write("\n");
      out.write("            $(\"#mainframe\").css(\"width\", $(window).width());\n");
      out.write("            $(\"#mainframe\").css(\"height\", $(window).height());\n");
      out.write("\n");
      out.write("            $(\"#mainframe\").swipe(\"destroy\");\n");
      out.write("\n");
      out.write("            mainframe = ReactDOM.render(React.createElement(Mainframe, null), document.getElementById('mainframe'));\n");
      out.write("            swappages = ReactDOM.render(React.createElement(SwapPages, null), mainframe.north()[0]);   \n");
      out.write("            \n");
      out.write("            var animationEnabled = false;\n");
      out.write("            var toIndex = false;\n");
      out.write("            var lastCheck = 0;\n");
      out.write("            var animations = [];\n");
      out.write("            var queue = [];\n");
      out.write("            var lastNoShowVisible = 0;\n");
      out.write("            var isAnimationRunning = false;\n");
      out.write("            var networkProblem = false;\n");
      out.write("            \n");
      out.write("            if (");
      out.print(animationSpeed);
      out.write(" > 0) {\n");
      out.write("                animationEnabled = true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function center(html) {\n");
      out.write("                mainframe.center(html);\n");
      out.write("            }\n");
      out.write("            function north(html) {\n");
      out.write("                mainframe.north(html);\n");
      out.write("            }\n");
      out.write("            function south(html) {\n");
      out.write("                mainframe.south(html);\n");
      out.write("            }\n");
      out.write("            function east(html) {\n");
      out.write("                mainframe.east(html);\n");
      out.write("            }\n");
      out.write("            function west(html) {\n");
      out.write("                mainframe.west(html);\n");
      out.write("            }\n");
      out.write("            function page1(html) {\n");
      out.write("                swappages.page1(html);\n");
      out.write("            }\n");
      out.write("            function page2(html) {\n");
      out.write("                swappages.page2(html);\n");
      out.write("            }\n");
      out.write("            function page(html, id) {\n");
      out.write("                swappages.page(html, id);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            $Log.level = \"DEBUG\";\n");
      out.write("\n");
      out.write("            $Log.onInfo = function (msg) {\n");
      out.write("                console.log(msg); \n");
      out.write("                var messages = document.getElementById('messages');\n");
      out.write("                messages.innerHTML += (\"<br/><font color='black'>INFO: \" + msg + \"</font>\");\n");
      out.write("            };\n");
      out.write("            $Log.onWarning = function (msg) {\n");
      out.write("                console.log(msg);\n");
      out.write("                var messages = document.getElementById('messages');\n");
      out.write("                messages.innerHTML += (\"<br/><font color='orange'>WARN: \" + msg + \"</font>\");\n");
      out.write("            };\n");
      out.write("            $Log.onError = function (msg) {\n");
      out.write("                console.log(msg);\n");
      out.write("                var messages = document.getElementById('messages');\n");
      out.write("                messages.innerHTML += (\"<br/><font color='red'><b>ERROR: \" + msg + \"</b></font>\");\n");
      out.write("            };\n");
      out.write("            $Log.onDebug = function (msg) {\n");
      out.write("                console.log(msg);\n");
      out.write("                var messages = document.getElementById('messages');\n");
      out.write("                messages.innerHTML += (\"<br/><font color='black'><i>DEBUG: \" + msg + \"</i></font>\");\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            function toggleLogs() {\n");
      out.write("                if ($(\"#logs\").css('display') === 'none') {\n");
      out.write("                    $(\"#logs\").show();\n");
      out.write("                } else {\n");
      out.write("                    $(\"#logs\").hide();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            function clearLogs() {\n");
      out.write("                var messages = document.getElementById('messages');\n");
      out.write("                messages.innerHTML = \"\";\n");
      out.write("            }\n");
      out.write("            function showLogs() {\n");
      out.write("                $(\"#logs\").show();\n");
      out.write("            }\n");
      out.write("            function hideLogs() {\n");
      out.write("                $(\"#logs\").hide();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var quartisManager = new QuartisManager();\n");
      out.write("            var quartisTools = new QuartisTools(\"");
      out.print(websocket);
      out.write("\", \"");
      out.print(token);
      out.write("\", \"");
      out.print( dispatcherUrl );
      out.write("\");\n");
      out.write("\n");
      out.write("            quartisManager.dispatcherUrl = \"");
      out.print(dispatcherUrl);
      out.write("\";\n");
      out.write("\n");
      out.write("            quartisManager.onWidgetRegistered = function (widget) {\n");
      out.write("                quartisTools.initMemories(widget.memories)\n");
      out.write("            };\n");
      out.write("            quartisManager.onConsoleRegistered = function (console) {\n");
      out.write("                quartisTools.initMemories(console.memories)\n");
      out.write("            };\n");
      out.write("            quartisManager.onConsoleUnregistered = function (console) {\n");
      out.write("                quartisTools.closeConsole(console.group, console.name);\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            quartisTools.onConnected = function () {\n");
      out.write("                $Log.debug(\"Connected to the server.\");\n");
      out.write("            };\n");
      out.write("            quartisTools.onDisconnected = function () {\n");
      out.write("                $Log.debug(\"Disconnected to the server.\");\n");
      out.write("            };\n");
      out.write("            quartisTools.onConnectingToQuartisTools = function () {\n");
      out.write("                $Log.debug(\"Connecting to Quartis Tools...\");\n");
      out.write("            };\n");
      out.write("            quartisTools.onConnectedToQuartisTools = function () {\n");
      out.write("                $Log.debug(\"Connected to Quartis Tools.\");\n");
      out.write("            };\n");
      out.write("            quartisTools.onLogingToQuartisTools = function (user) {\n");
      out.write("                $Log.debug(\"Loging with \" + user.name + \" to Quartis Tools...\");\n");
      out.write("            };\n");
      out.write("            quartisTools.onLogonToQuartisTools = function (user) {\n");
      out.write("\n");
      out.write("                $(\"#loading\").hide();\n");
      out.write("\n");
      out.write("                if (quartisManager.user !== null && quartisManager.user.name === user.name) {\n");
      out.write("\n");
      out.write("                    $Log.warning(\"User \" + user.name + \" already logon !\");\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("\n");
      out.write("                } else {\n");
      out.write("\n");
      out.write("                    $Log.debug(user.name + \" logon to Quartis Tools !\");\n");
      out.write("\n");
      out.write("                    quartisManager.login(user);\n");
      out.write("\n");
      out.write("                    return true;\n");
      out.write("\n");
      out.write("                }\n");
      out.write("\n");
      out.write("            };\n");
      out.write("            quartisTools.onLogoutToQuartisTools = function (user, auto) {\n");
      out.write("\n");
      out.write("                $(\"#loading\").hide();\n");
      out.write("\n");
      out.write("                quartisManager.logout();\n");
      out.write("\n");
      out.write("                if (!auto) {\n");
      out.write("                    $Log.debug(user.name + \" logout to Quartis Tools.\");\n");
      out.write("                    quartisTools.disconnect();\n");
      out.write("                } else {\n");
      out.write("                    toIndex = true;\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("            quartisTools.onDisconnectedToQuartisTools = function (auto) {\n");
      out.write("\n");
      out.write("                quartisManager.logout();\n");
      out.write("\n");
      out.write("                if (!auto) {\n");
      out.write("                    $Log.debug(\"Disconnected to Quartis Tools.\");\n");
      out.write("                    quartisTools.disconnect();\n");
      out.write("                } else {\n");
      out.write("                    toIndex = true;\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("            quartisTools.onDisconnected = function () {\n");
      out.write("                $Log.debug(\"Disconnected to the server.\");\n");
      out.write("\n");
      out.write("                toIndex = true;\n");
      out.write("            };\n");
      out.write("            quartisTools.onOpenConsole = function (console) {\n");
      out.write("                $Log.debug(\"Opening QuartisTools Console: \" + console.group + \"/\" + console.name + \"...\");\n");
      out.write("\n");
      out.write("                quartisManager.loadConsole(null, console.group, console.name);\n");
      out.write("            };\n");
      out.write("            quartisTools.onCloseConsole = function (console) {\n");
      out.write("                $Log.debug(\"Closing QuartisTools Console: \" + console.group + \"/\" + console.name + \"...\");\n");
      out.write("\n");
      out.write("                quartisManager.closeConsole(console.group, console.name);\n");
      out.write("            };\n");
      out.write("            quartisTools.onUpdateMemory = function (memory, value) {\n");
      out.write("                quartisManager.updateMemory(memory, value);\n");
      out.write("            };\n");
      out.write("\n");
      out.write("\n");
      out.write("            function getUser() {\n");
      out.write("                return quartisManager.user;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function openWindow(group, name, params) {\n");
      out.write("                if (params !== undefined) {\n");
      out.write("                    quartisManager.openConsole(group, name, params);\n");
      out.write("                } else {\n");
      out.write("                    quartisManager.openConsole(group, name, null);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function openRelativeWindow(path, group, name, params) {\n");
      out.write("                if (params !== undefined) {\n");
      out.write("                    quartisManager.openRelativeConsole(path, group, name, params);\n");
      out.write("                } else {\n");
      out.write("                    quartisManager.openRelativeConsole(path, group, name, null);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function openWindowExt(path, group, name, ext, params) {\n");
      out.write("                if (params !== undefined) {\n");
      out.write("                    quartisManager.openExtendedConsole(path, group, name, ext, params);\n");
      out.write("                } else {\n");
      out.write("                    quartisManager.openExtendedConsole(path, group, name, ext, null);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function closeWindow(group, name, callback) {\n");
      out.write("                quartisManager.closeConsole(group, name, callback);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function closeWindowExt(group, name, ext, callback) {\n");
      out.write("                quartisManager.closeExtendedConsole(group, name, ext, callback);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function executeSCRIPT(script) {\n");
      out.write("                quartisManager.executeScript(script);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function readMemory(name) {\n");
      out.write("                return quartisTools.readMemory(name);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function writeMemory(name, value) {\n");
      out.write("                quartisTools.writeMemory(name, value);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function executeLPX(lpx, params) {\n");
      out.write("                var str = \"\";\n");
      out.write("                if ($.isArray(params)) {\n");
      out.write("                    for (var i = 0; i < params.length; i++) {\n");
      out.write("                        if (i !== 0) {\n");
      out.write("                            str += \"|\";\n");
      out.write("                        }\n");
      out.write("                        str += params[i];\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                quartisTools.executeLpx(lpx, [str]);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function alertQuartisToolsMessage(message) {\n");
      out.write("                $.get(\"");
      out.print( dispatcherUrl );
      out.write("/quartispro-tools/logger?message=\" + message);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Manage bar code event from QuartisBrowser for datalogic PDA\n");
      out.write("            function notifyBarcode(barcode) {\n");
      out.write("                if (document.activeElement !== undefined && document.activeElement.value !== undefined) {\n");
      out.write("                    document.activeElement.value = barcode;\n");
      out.write("                } else {\n");
      out.write("                    alert('Error cannot retrieve input element');\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function scheduleCheckConnection() {\n");
      out.write("                var d = new Date();\n");
      out.write("                if (d.getTime() - lastCheck > 10000) {\n");
      out.write("                    lastCheck = d.getTime();\n");
      out.write("\n");
      out.write("                    if (!quartisTools.isConnected()) {\n");
      out.write("                        quartisTools.connect();\n");
      out.write("                    } else if (!quartisTools.isLogon()) {\n");
      out.write("                        quartisTools.connectToQuartisTools();\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            quartisManager.scheduleRefreshData();\n");
      out.write("\n");
      out.write("            //scheduleCheckConnection();\n");
      out.write("            \n");
      out.write("            var pingWS = undefined;\n");
      out.write("            var wsIsOpen = true;\n");
      out.write("            var isAlreadyClose = false;\n");
      out.write("            \n");
      out.write("            function startPingWS() {\n");
      out.write("                pingWS = new WebSocket('");
      out.print( websocket );
      out.write("/ping');\n");
      out.write("\n");
      out.write("                pingWS.onopen = function() {\n");
      out.write("                    wsIsOpen = true;\n");
      out.write("                    isAlreadyClose = false;\n");
      out.write("                }\n");
      out.write("                pingWS.onmessage = function(e) {\n");
      out.write("                }\n");
      out.write("                pingWS.onclose = function() {\n");
      out.write("                    wsIsOpen = false;\n");
      out.write("                    if(isAlreadyClose === false) {\n");
      out.write("                        reconnectWS();\n");
      out.write("                    }\n");
      out.write("                    isAlreadyClose = true;\n");
      out.write("                }\n");
      out.write("                pingWS.onerror = function(e) {\n");
      out.write("                    wsIsOpen = false;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function reconnectWS() {\n");
      out.write("                if (wsIsOpen !== true) {\n");
      out.write("                    startPingWS();\n");
      out.write("                    setTimeout(function () {\n");
      out.write("                        reconnectWS();\n");
      out.write("                    }, 1000);\n");
      out.write("                } else {\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            \n");
      out.write("            function pingWSSend() {\n");
      out.write("                // Check duration between now and the lasting ping\n");
      out.write("                if (wsIsOpen) {\n");
      out.write("                     if (toIndex) {\n");
      out.write("                         // Reload app after delay of 5 second : be sure that quartis pro auth is up / because we only know that quartis pro tools is up\n");
      out.write("                        setTimeout(function() { \n");
      out.write("                            if (networkProblem === false) {\n");
      out.write("                                $(\"#error-modal\").hide();\n");
      out.write("                                $(\"#runtime-error\").hide();\n");
      out.write("                            }\n");
      out.write("                    \n");
      out.write("                            window.location.href = '");
      out.print( dispatcherUrl );
      out.write("/quartispro-auth/index.jsp?lang=' + '");
      out.print( lang );
      out.write("'; \n");
      out.write("                        }, 5000);\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    scheduleCheckConnection();\n");
      out.write("\n");
      out.write("                    setTimeout(function () {\n");
      out.write("                        pingWSSend();\n");
      out.write("                    }, 1000);\n");
      out.write("                } else {\n");
      out.write("                    $(\"#error-modal\").show();\n");
      out.write("                    $(\"#runtime-error\").show();\n");
      out.write("                    $(\"#network-error\").hide();\n");
      out.write("\n");
      out.write("                    setTimeout(function () {\n");
      out.write("                        pingWSSend();\n");
      out.write("                    }, 1000);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            startPingWS();\n");
      out.write("            pingWSSend();\n");
      out.write("            \n");
      out.write("            // Si une fonction Javascript a un problème, il est possible qu'on arrive jamais dans le noShow qui ce lance en callback\n");
      out.write("            // Permet d'enlever le noShow \n");
      out.write("            function checkNoShow(){\n");
      out.write("                var isVisible = $(\"#noclick\").is(\":visible\");\n");
      out.write("                if (isVisible) {\n");
      out.write("                    lastNoShowVisible++;\n");
      out.write("                } else {\n");
      out.write("                    lastNoShowVisible = 0;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                if(lastNoShowVisible > 15) {\n");
      out.write("                    $(\"#noclick\").hide();\n");
      out.write("                    isAnimationRunning = false;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                setTimeout(checkNoShow, 1300); \n");
      out.write("            }\n");
      out.write("\n");
      out.write("            checkNoShow();\n");
      out.write("            //ping();\n");
      out.write("            \n");
      out.write("            // ## OUVERTURE / FERMETURE\n");
      out.write("            function showPageN(id, cb, animation) {\n");
      out.write("                hideOtherNorthPage(id);\n");
      out.write("                $(\"html\").trigger(\"showPage\");\n");
      out.write("                return animWithParams(['.mainframe-north', '.swap-page' + id], [], 'moveTopToCenter', '.swap-page' + id, cb, true, false, animation);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function showPageDirectly(id) {\n");
      out.write("                $('.swap-page' + id).show();\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function showCenterN(cb) {\n");
      out.write("                return new Promise(function(resolve, reject) {\n");
      out.write("                    hideOpacity();\n");
      out.write("                    $(\"html\").trigger(\"showCenter\");\n");
      out.write("                    $(\".mainframe-center\").show();\n");
      out.write("                    if (cb) {\n");
      out.write("                      cb(); \n");
      out.write("                    }\n");
      out.write("                    resolve('finished');\n");
      out.write("                })\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function showSouthN(cb) {\n");
      out.write("                $(\"html\").trigger(\"showSouth\");\n");
      out.write("                return animWithParams(['.mainframe-south'], [], 'moveBotToCenter', '.mainframe-south', cb, true, true);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function showEastN(cb) {\n");
      out.write("                $(\"html\").trigger(\"showEast\");\n");
      out.write("                return animWithParams(['.mainframe-east'], [], 'moveEastToCenter', '.mainframe-east', cb, true, false);   \n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function hidePageN(id, cb) {\n");
      out.write("                return animWithParams([], ['.mainframe-north', '.swap-page' + id], 'moveToTop', '.swap-page' + id, cb, false, false);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function hideSouthN(cb) {\n");
      out.write("                return animWithParams([], ['.mainframe-south'], 'moveToBot', '.mainframe-south', cb, false, true);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function hideEastN(cb) {\n");
      out.write("                return animWithParams([], ['.mainframe-east'], 'MoveToEast', '.mainframe-east', cb, false, false);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function showOpacity(isSouth) {\n");
      out.write("                $(\".mainframe-center\").css({ opacity: 0.2 });\n");
      out.write("                \n");
      out.write("                if(isSouth) {\n");
      out.write("                    $(\".mainframe-north\").hide();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function hideOpacity(isSouth) {\n");
      out.write("                $(\".mainframe-center\").css({ opacity: 1 });\n");
      out.write("\n");
      out.write("                if (isSouth && $Nav.lastClosedConsole === \"footer-page\") {\n");
      out.write("                    $(\".mainframe-north\").hide();\n");
      out.write("                } else if(isSouth) {\n");
      out.write("                    $(\".mainframe-north\").show();\n");
      out.write("                }  \n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function animWithParams(show, hide, className, classToAnim, callback, isOpen, isSouth, animation) {\n");
      out.write("                return new Promise(function(resolve, reject) {\n");
      out.write("                    // Show page\n");
      out.write("                    for (var i = 0; i < show.length; i++) {\n");
      out.write("                        $(show[i]).show();\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    // Show opacity\n");
      out.write("                    if (isOpen) {\n");
      out.write("                        if (isSouth) {\n");
      out.write("                            showOpacity(true);\n");
      out.write("                        } else  {\n");
      out.write("                            showOpacity();\n");
      out.write("                        }\n");
      out.write("                    } else {\n");
      out.write("                        if (isSouth) {\n");
      out.write("                             hideOpacity(true);\n");
      out.write("                        } else  {\n");
      out.write("                             hideOpacity();\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    // If animation are activated and it's it's not page north twice\n");
      out.write("                    if (!animation && animationEnabled) {\n");
      out.write("                        // Bind to animation end\n");
      out.write("                        $(classToAnim).bind(\"animationend\", function() {\n");
      out.write("                            // Unbind animation\n");
      out.write("                            $(classToAnim).removeClass(className);\n");
      out.write("                            $(classToAnim).unbind(\"animationend\");\n");
      out.write("\n");
      out.write("                            // Execute callback\n");
      out.write("                            if (callback) {\n");
      out.write("                              callback(); \n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            // Hide window\n");
      out.write("                            for (var i = 0; i < hide.length; i++) {\n");
      out.write("                                $(hide[i]).hide();\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // Say to queue that it is finished\n");
      out.write("                            resolve('finished');\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        // Add animation class\n");
      out.write("                        $(classToAnim).addClass(className);\n");
      out.write("                    } else {\n");
      out.write("                        // Execute callback\n");
      out.write("                        if (callback) {\n");
      out.write("                          callback(); \n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Hide window\n");
      out.write("                        for (var i = 0; i < hide.length; i++) {\n");
      out.write("                            $(hide[i]).hide();\n");
      out.write("                        }\n");
      out.write("                        \n");
      out.write("                        // Say to queue that it is finished\n");
      out.write("                        resolve('finished');\n");
      out.write("                    }\n");
      out.write("                   \n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function hideOtherNorthPage(id) {\n");
      out.write("                if (id !== 1) {\n");
      out.write("                    $(\".swap-page1\").hide();\n");
      out.write("                }\n");
      out.write("                if (id !== 2) {\n");
      out.write("                    $(\".swap-page2\").hide();\n");
      out.write("                }\n");
      out.write("                if (id !== 3) {\n");
      out.write("                    $(\".swap-page3\").hide();\n");
      out.write("                }\n");
      out.write("                if (id !== 4) {\n");
      out.write("                    $(\".swap-page4\").hide();\n");
      out.write("                }\n");
      out.write("                if (id !== 5) {\n");
      out.write("                    $(\".swap-page5\").hide();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function launchAnimation(anim) {\n");
      out.write("                queue.push(anim);\n");
      out.write("                dequeue();\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function dequeue() {\n");
      out.write("                if (!isAnimationRunning && queue.length > 0) {\n");
      out.write("                    $(\"#noclick\").show();\n");
      out.write("                    isAnimationRunning = true;\n");
      out.write("                    var anim = queue.shift()\n");
      out.write("                    anim().then(function () {\n");
      out.write("                        isAnimationRunning = false;\n");
      out.write("                        $(\"#noclick\").hide();\n");
      out.write("                        if (queue.length === 0) {\n");
      out.write("                            return 0;\n");
      out.write("                        } else {\n");
      out.write("                            dequeue();\n");
      out.write("                        }\n");
      out.write("                    })\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Gestion des \"pressure\" pour les modats android\n");
      out.write("            // Le browser ne gère pas bien l'attribut css :active\n");
      out.write("            // on lance donc l'animation en JS afin que l'utilisateur\n");
      out.write("            // est un retour visuel\n");
      out.write("            if (isAndroidMobile()) {\n");
      out.write("                $(document).on(\"click\",\".btn-basic, .widget.active, .tcl-pro-fonctions .svg-container, .widget.clickable\",function(e){\n");
      out.write("                    $(e.target).addClass(\"androidMobileClickAnimation\");\n");
      out.write("                    setTimeout(function() {\n");
      out.write("                        $(e.target).removeClass(\"androidMobileClickAnimation\");\n");
      out.write("                    }, 250);\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Check network availability to restart app when it's okay\n");
      out.write("            function testOffline() {\n");
      out.write("                setTimeout(function () {\n");
      out.write("                    Offline.check();\n");
      out.write("                    testOffline();\n");
      out.write("                }, 3000);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            testOffline();\n");
      out.write("            // Show error message\n");
      out.write("            Offline.on('confirmed-down', function () {\n");
      out.write("                if (!$(\"#error-modal\").is(\":visible\")) {\n");
      out.write("                    networkProblem = true;\n");
      out.write("                    $(\"#error-modal\").show();\n");
      out.write("                    $(\"#network-error\").show();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("            \n");
      out.write("            // remvove error message and restart the app\n");
      out.write("            Offline.on('confirmed-up', function () {\n");
      out.write("                var networkOldStatus = networkProblem;\n");
      out.write("                \n");
      out.write("                networkProblem = false;\n");
      out.write("                $(\"#error-modal\").hide();\n");
      out.write("                $(\"#network-error\").hide();\n");
      out.write("                \n");
      out.write("                if (networkOldStatus === true) {\n");
      out.write("                    window.location.href = '");
      out.print( dispatcherUrl );
      out.write("/quartispro-auth/index.jsp?lang=' + '");
      out.print( lang );
      out.write("';\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("            \n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
